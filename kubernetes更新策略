## kubernets的更新时merger方式-申明式文件
``kubectl apply -f <pod>_<name>.yaml``可以创建或者更新一个pod
当我们通过一个配置文件，使用``kubectl apply``集群中的对象时，会发送一个patch
请求到集群中，此时，``kubectl apply``命令需要通过配置文件，存活对象已经存活对象
的一个annotation ``last-applied-configuration``来计算patch请求的参数
### 字段计算原则
- 删除字段：``last-applied-configuration``中有但是配置文件中没有
- 增加或者设置字段：配置文件中有，存活对象中没有
### 字段合并方式
字段合并需要根据不同的字段类型来决定。
- 基本类型。基本类型包括string/int/boolean等。合并方式：直接替换
- map或者对象类型。合并元素或者子对象。
- list类型。不同的字段有不同的策略。

#### 基本字段类型
配置文件|存活对象|注解|动作
:-|:-:|:-:|:-:
yes|yes|-|使用配置文件中的值
yes|no|-|Set live to local configuration.
no|-|yes|清空配置
no|-|no|什么都不做

#### map或者对象类型
配置文件|存活对象|注解|动作
:-|:-:|:-:|:-:
yes|yes|-|比较子对象的值
yes|no|-|Set live to local configuration.
no|-|yes|删除配置
no|-|no|什么都不做

#### list类型
list类型的合并有三种策略
- 直接替换list
- 逐个换个list里面的元素
- 合并list里面的原始数据类型
##### 直接替换
```yaml
# last-applied-configuration value
    args: ["a", "b"]
# configuration file value
    args: ["a", "c"]
# live configuration
    args: ["a", "b", "d"]
# result after merge
    args: ["a", "c"]
```
##### 逐个替换
list的逐个替换有点类似map，其中以对象的某一个字段作为比对的key，用于判断是同一个
对象,该字段的定义见源码：[types.go](https://github.com/kubernetes/api/blob/d04500c8c3dda9c980b668c57abc2ca61efcf5c4/core/v1/types.go#L2747)
比如containers，就是用name作为比对的key
##### 合并原始数据
这种策略自1.5版本开始就已经不再支持

### 默认字段处理
当一个对象创建时，如果某些字段没有指定，apiserver会给设置一些默认值。
其中某些值是依赖其他的一些值的，比如一个deployment的配置文件
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
```
当此deployment创建以后，我们可以通过``kubectl get``拿到配置，结果如下：
```yaml
apiVersion: apps/v1
kind: Deployment
# ...
spec:
  selector:
    matchLabels:
      app: nginx
  minReadySeconds: 5
  replicas: 1 # apiserver设置的默认值
  strategy:
    rollingUpdate: # apiserver设置默认值 - 由strategy.type决定
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate # apiserver设置的默认是
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx
# ...
```
此时如果我们修改配置文件中的spec.strategy.type，合并结果如下：

```yaml
# last-applied-configuration
spec:
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
# 配置文件
spec:
  strategy:
    type: Recreate # updated value
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
# 存活对象
spec:
  strategy:
    type: RollingUpdate # defaulted value
    rollingUpdate: # defaulted value derived from type
      maxSurge : 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
# 合并结果 - ERROR!
spec:
  strategy:
    type: Recreate # 更新后的值: 跟rollingUpdate不兼容
    rollingUpdate: # 默认值: 跟type: Recreate"不兼容
      maxSurge : 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80
```
#### 怎么清空默认字段或者由其他角色写的字段
将配置文件中的字段设置为null
